#!/usr/bin/env perl
=rem
Написать утилиту grep

```sh
$ seq 1 10 | grep -P -o '[1-3]'
1
2
3
1
```

Обязательные параметры:

- `-i` — игнорировать регистр
- `-o` — выводить только ту часть что совпала с регулярным выражением
- `-P` — принимать и игнорировать

Дополнительные параметры на дополнительные баллы:

- `-b` — выводить перед каждым совпадением смещение в байтах от начала входных данных
- `-w` — выбирать только строки которые шаблон в которых целиком захватывает слова (не попадает на границу слова)
- `-x` — выбирать только строки целиком состоящие из заданного шаблона
=cut


use strict;
use warnings;
use 5.10.0;
use Getopt::Long;

my $ignore_case_v = undef;
my $only_matching_v = undef;
my $perl_regexp_v = undef;
my $pattern_v = undef;

GetOptions ("i|ignore-case"=> \$ignore_case_v, "o|only-matching" => \$only_matching_v,
            "P|perl-regexp" => \$perl_regexp_v, "<>" => \&take_pattern_v );


if (not $perl_regexp_v) {
    exit(0);
}
elsif (not defined $pattern_v) {
    die "Need pattern";
}

my @input_data = <>;

my $gen_regx = "(?<CMP>".$pattern_v.")";

if ($ignore_case_v) {
   $gen_regx = "(?i)".$gen_regx;
}

for my $c_line (@input_data) {
    chomp($c_line);

    if ($c_line =~ $gen_regx) {
        if ($only_matching_v) {
           say $+{CMP};
        }
        else { 
           say $c_line;
        }
    }
}
    

sub take_pattern_v {
    warn "More patterns" if (defined $pattern_v);
    $pattern_v = shift @_;
}


1;
    


